<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>dev etc</title>
		<description>Where mistakes go to die.</description>		
		<link>http://devetc.org</link>
		<atom:link href="http://devetc.orgfeed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Dependent Key Paths</title>
				<description>&lt;p&gt;Much can be said about &lt;a href=&quot;kvo&quot;&gt;key–value observing&lt;/a&gt; (KVO).
At very least, it’s an interesting use of Objective-C’s runtime dynamism.
The Apple-provided API is rudimentary; I like to layer something on top that calls a block instead of a method that needs its own dispatch table.
Other libraries like &lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot;&gt;ReactiveCocoa&lt;/a&gt; wrap it in its own conventions.&lt;/p&gt;

&lt;p&gt;But that higher-level stuff is a discussion for another time.
Right now I want to talk about key path dependencies.&lt;/p&gt;

&lt;p&gt;Key–value observing supports notifications both directly and indirectly.
Direct notifications, via &lt;code&gt;[self willChangeValueForKey:@&quot;foo&quot;]&lt;/code&gt; and &lt;code&gt;[self didChangeValueForKey:@&quot;foo&quot;]&lt;/code&gt;, are automatically wrapped around the corresponding &lt;code&gt;-setFoo:&lt;/code&gt; setter implementation method (by default).&lt;/p&gt;

&lt;p&gt;But some properties don’t have direct setters.
The canonical&lt;sup id=&quot;fnref:fn-names&quot;&gt;&lt;a href=&quot;#fn:fn-names&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; example for this is this class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;givenName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;familyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;@[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;givenName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;familyName&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;componentsJoinedByString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;fullName&lt;/code&gt; getter depends on &lt;code&gt;givenName&lt;/code&gt; and &lt;code&gt;familyName&lt;/code&gt;.
As such it should be annotated as depending on those key paths, so that when an object registers to observe &lt;code&gt;fullName&lt;/code&gt; it will get a notification when &lt;code&gt;-setGivenName:&lt;/code&gt; and &lt;code&gt;-setFamilyName:&lt;/code&gt; are called.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVODependentKeys.html#//apple_ref/doc/uid/20002179-BAJEAIEE&quot;&gt;+keyPathsForValuesAffectingValueForKey:&lt;/a&gt; method marks that dependency.
The usual way to specify the above dependency is to implement a method with a special naming convention:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keyPathsForValuesAffectingFullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setWithObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;givenName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;familyName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The default implementation of &lt;code&gt;+keyPathsForValuesAffectingValueForKey:&lt;/code&gt; dispatches to the method with this name (if any), just as &lt;code&gt;-valueForKey:@&quot;givenName&quot;&lt;/code&gt; dispatches to &lt;code&gt;-givenName&lt;/code&gt; and &lt;code&gt;-setValue: forKey:@&quot;givenName&quot;&lt;/code&gt; dispatches to &lt;code&gt;-setGivenName:&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dependency-helpers&quot;&gt;Dependency helpers&lt;/h2&gt;

&lt;p&gt;A common case that comes up is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeSingleton&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mySetting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUserDefaults&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;standardUserDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;boolForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;someKey&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If user defaults can change separately from this code (and you should probably assume it can), providing correct KVO change notifications can be accomplished by having the singleton observe &lt;code&gt;NSUserDefaults&lt;/code&gt; with &lt;code&gt;NSKeyValueObservingOptionPrior&lt;/code&gt;; posting &lt;code&gt;willChangeValueForKey:@&quot;mySetting&quot;&lt;/code&gt; on the prior callback and &lt;code&gt;didChangeValueForKey:@&quot;mySetting&quot;&lt;/code&gt; on the post callback.
But this sucks — it’s wordy and you pay a (small) performance cost even if &lt;code&gt;mySetting&lt;/code&gt; isn’t observed.&lt;/p&gt;

&lt;p&gt;A simpler and more efficient approach is this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeSingleton&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keyPathsForValuesAffectingMySetting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setWithObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;$defaults.someKey&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mySetting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUserDefaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;$defaults&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUserDefaults&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;standardUserDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jmah/MyLilKeyPathHelpers&quot;&gt;MyLilKeyPathHelpers&lt;/a&gt; adds this shortcut and a couple of others as a category on &lt;code&gt;NSObject&lt;/code&gt;&lt;sup id=&quot;fnref:fn-avoid-categories&quot;&gt;&lt;a href=&quot;#fn:fn-avoid-categories&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;$defaults&lt;/code&gt; for &lt;code&gt;[NSUserDefaults standardUserDefaults]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$app&lt;/code&gt; for the global shared &lt;code&gt;NSApplication&lt;/code&gt; or &lt;code&gt;UIApplication&lt;/code&gt; instance (handy as &lt;code&gt;$app.delegate.someKey&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$classes&lt;/code&gt; as a generic method for the above: for example, &lt;code&gt;$classes.SomeSingleton.sharedInstance.someKey&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These make it easier to get properties KVO-compliant.
And yes, it’s legal to use &lt;code&gt;$&lt;/code&gt; in identifiers, but be very restrained with it!&lt;/p&gt;

&lt;h2 id=&quot;specifying-dependencies&quot;&gt;Specifying dependencies&lt;/h2&gt;

&lt;p&gt;Instead of implementing the dependency method with a special name, it can be convenient to override the top-level method directly.
For example, each item in &lt;a href=&quot;http://delicious-monster.com/&quot;&gt;Delicious Library&lt;/a&gt; has properties for fields like title, author, LCCN&lt;sup id=&quot;fnref:fn-lccn&quot;&gt;&lt;a href=&quot;#fn:fn-lccn&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, and notes.
Sorting by these fields sometimes requires custom behavior — for example, sorting by author attempts to massage “Malcolm Gladwell” into “Gladwell, Malcolm”.&lt;/p&gt;

&lt;p&gt;The way we implement this is to append “ForSorting” to each sort descriptor key.
Then we can provide an &lt;code&gt;-authorForSorting&lt;/code&gt; method with this custom behavior.
We also override &lt;code&gt;-valueForKey:&lt;/code&gt; to strip “ForSorting” if the object didn’t have a custom implementation, and just return the plain value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NSArrayController&lt;/code&gt; observes the keys of its sort descriptors to rearrange (re-sort) when one of the values change.
Accordingly, the “ForSorting” keys needed to be KVO-compliant.
Just as we override the dispatching &lt;code&gt;-valueForKey:&lt;/code&gt; method, we also overrode &lt;code&gt;+keyPathsForValuesAffectingValueForKey:&lt;/code&gt; to declare (by default)&lt;sup id=&quot;fnref:fn-custom-deps&quot;&gt;&lt;a href=&quot;#fn:fn-custom-deps&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; that &lt;code&gt;authorForSorting&lt;/code&gt; depends on &lt;code&gt;author&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;hell-is-other-peoples-superclasses&quot;&gt;Hell is other people’s superclasses&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;sicp&quot;&gt;SICP&lt;/a&gt; made me a convert to the idea of composability.
When building a component on top of another — in this case, writing a class by subclassing &lt;code&gt;NSObjet&lt;/code&gt; — ideally you can build use on top of it in the same manner the original was constructed.
That is, your class should behave correctly when used as a superclass.&lt;/p&gt;

&lt;p&gt;Let’s see what happens when we extend behavior of our original &lt;code&gt;Person&lt;/code&gt; class by subclassing.
The &lt;code&gt;FancyPerson&lt;/code&gt; class provides behavior for “John Smith, Esquire”, and &lt;code&gt;TitledPerson&lt;/code&gt; provides “Mr Smith”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FancyPerson&lt;/span&gt; : &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FancyPerson&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;@[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;componentsJoinedByString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TitledPerson&lt;/span&gt; : &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TitledPerson&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;@[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;familyName&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;componentsJoinedByString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Both of these demonstrate a different behavior:
&lt;code&gt;FancyPerson&lt;/code&gt; &lt;em&gt;enhances&lt;/em&gt; the &lt;code&gt;fullName&lt;/code&gt; method, by calling super and supplementing the return value.
&lt;code&gt;TitledPerson&lt;/code&gt; &lt;em&gt;replaces&lt;/em&gt; the &lt;code&gt;fullName&lt;/code&gt; method, with no call to &lt;code&gt;[super fullName]&lt;/code&gt;.
Accordingly, &lt;code&gt;-[FancyPerson fullName]&lt;/code&gt; should declare that it depends on whatever &lt;code&gt;-[Person fullName]&lt;/code&gt; depends on, plus the &lt;code&gt;suffix&lt;/code&gt; key.
And &lt;code&gt;-[TitledPerson fullName]&lt;/code&gt; depends on only &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;familyName&lt;/code&gt;, regardless of the superclass.&lt;/p&gt;

&lt;p&gt;Let’s start with the enhancement case.&lt;/p&gt;

&lt;h3 id=&quot;enhancing-key-path-dependencies&quot;&gt;Enhancing key path dependencies&lt;/h3&gt;

&lt;p&gt;The naive approach has a compile error:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FancyPerson&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keyPathsForValuesAffectingFullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyPathsForValuesAffectingFullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setByAddingObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;suffix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// error: no known class method for selector &amp;#39;keyPathsForValuesAffectingFullName&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Key path dependencies are typically private, not declared in a class’s interface, so the call to super will be a warning or error.
You could declare that you &lt;em&gt;know&lt;/em&gt; the superclass to implement that method, but that couples to the implementation and may not be correct if &lt;code&gt;Person&lt;/code&gt; is instead overriding the dispatching method &lt;code&gt;+keyPathsForValuesAffectingValueForKey:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similar to &lt;a href=&quot;/code/2014/03/02/subclassing-delegates.html&quot;&gt;subclassing delegates&lt;/a&gt;, the correct solution is to use the defining class&lt;sup id=&quot;fnref:fn-defining-class&quot;&gt;&lt;a href=&quot;#fn:fn-defining-class&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FancyPerson&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keyPathsForValuesAffectingFullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superclassKeys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FancyPerson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;keyPathsForValuesAffectingValueForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;fullName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superclassKeys&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setByAddingObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;suffix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is robust against the superclass’s implementation, no matter if it specifies dependencies by implementing the specific method, overriding the dispatching one, or none at all.&lt;/p&gt;

&lt;h3 id=&quot;replacing-key-path-dependencies&quot;&gt;Replacing key path dependencies&lt;/h3&gt;

&lt;p&gt;Now let’s consider &lt;code&gt;TitledPerson&lt;/code&gt;’s override:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TitledPerson&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keyPathsForValuesAffectingFullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setWithObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;familyName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is fine.
However there will be a problem if &lt;code&gt;Person&lt;/code&gt; were to instead override the dispatching method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keyPathsForValuesAffectingValueForKey:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;fullName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// don&amp;#39;t do this&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setWithObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;givenName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;familyName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;keyPathsForValuesAffectingValueForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, the call &lt;code&gt;[TitledPerson keyPathsForValuesAffectingValueForKey:@&quot;fullName&quot;]&lt;/code&gt; completely ignores the &lt;code&gt;TitledPerson&lt;/code&gt; override!
Specifically, only when the call to super hits &lt;code&gt;NSObject&lt;/code&gt;’s implementation of &lt;code&gt;+keyPathsForValuesAffectingValueForKey:&lt;/code&gt; will the subclass’s override of &lt;code&gt;+keyPathsForValuesAffectingFullName&lt;/code&gt; be called.
You are in a maze of twisty little passages, all alike.&lt;/p&gt;

&lt;p&gt;The problem here is the naive implementation of the &lt;code&gt;+[Person keyPathsForValuesAffectingValueForKey:]&lt;/code&gt; override.&lt;/p&gt;

&lt;h2 id=&quot;correctly-overriding-keypathsforvaluesaffectingvalueforkey&quot;&gt;Correctly overriding +keyPathsForValuesAffectingValueForKey:&lt;/h2&gt;

&lt;p&gt;It’s valid for dependencies to be specified in &lt;em&gt;either&lt;/em&gt; the dispatching or specific methods, all the way up the inheritance chain.
Correctly overriding &lt;code&gt;+keyPathsForValuesAffectingValueForKey:&lt;/code&gt; requires some tricky code, which I’ve wrapped in a function &lt;a href=&quot;https://github.com/jmah/MyLilKeyPathHelpers/blob/7ed5da8355090b27ceeeb02a20baa7bf7a63eb8a/MyLilKeyPathHelpers/MLHDependentKeyPaths.m#L41&quot;&gt;MLHOverrideKeyPathsForValueAffectingKey&lt;/a&gt; in &lt;a href=&quot;https://github.com/jmah/MyLilKeyPathHelpers&quot;&gt;MyLilKeyPathHelpers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Person&lt;/code&gt; class can use this to correctly override the dispatching method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keyPathsForValuesAffectingValueForKey:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MLHOverrideKeyPathsForValueAffectingKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superKeyPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;fullName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or -hasSuffix:, etc.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setWithObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;givenName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;familyName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superKeyPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this implementation, calling &lt;code&gt;[TitledPerson keyPathsForValuesAffectingValueForKey:@&quot;fullName&quot;]&lt;/code&gt; results in a call to &lt;code&gt;[TitledPerson keyPathsForValuesAffectingFullName]&lt;/code&gt; and that’s all.
Accomplishing this unfortunately requires a reimplementation of the method name logic in &lt;code&gt;NSObject&lt;/code&gt;’s &lt;code&gt;+keyPathsForValuesAffectingValueForKey:&lt;/code&gt;; I believe this is inescapable.&lt;/p&gt;

&lt;p&gt;All the parameters to this function are documented in the &lt;a href=&quot;https://github.com/jmah/MyLilKeyPathHelpers/blob/7ed5da8355090b27ceeeb02a20baa7bf7a63eb8a/MyLilKeyPathHelpers/MLHDependentKeyPaths.h#L35&quot;&gt;header&lt;/a&gt;; take a look.
This same technique could be applied to an override of &lt;code&gt;-valueForKey:&lt;/code&gt;, though that generally doesn’t have the same issues because the dispatch targets (that is, getter methods) &lt;em&gt;are&lt;/em&gt; declared in a class’s public interface.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fn-names&quot;&gt;
      &lt;p&gt;and ridden with Anglo-centric cultural assumptions; see &lt;a href=&quot;http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/&quot;&gt;Falsehoods Programmers Believe About Names&lt;/a&gt; &lt;a href=&quot;#fnref:fn-names&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn-avoid-categories&quot;&gt;
      &lt;p&gt;As a rule I try to avoid categories on framework classes as much as possible. I feel this is one of the rare cases when it’s appropriate. &lt;a href=&quot;#fnref:fn-avoid-categories&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn-lccn&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Library_of_Congress_Control_Number&quot;&gt;Library of Congress Control Number&lt;/a&gt; &lt;a href=&quot;#fnref:fn-lccn&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn-custom-deps&quot;&gt;
      &lt;p&gt;Some “ForSorting” values depend on more than one key. For example, &lt;code&gt;-titleForSorting&lt;/code&gt; depends on both &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;dominantLanguageCode&lt;/code&gt;, so “Die Another Day” sorts under “D” while your German copy of “Die Bourne Identität” sorts under “B”. Incidentally this causes a lot of user confusion when the language information is not correct. &lt;a href=&quot;#fnref:fn-custom-deps&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn-defining-class&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;mlkph&quot;&gt;MyLilKeyPathHelpers&lt;/a&gt; provides a helper macro for this called &lt;code&gt;_definingClass&lt;/code&gt;: &lt;a href=&quot;#fnref:fn-defining-class&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Sun, 11 Jan 2015 19:25:59 -0800</pubDate>
				<link>http://devetc.org/code/2015/01/11/dependent-key-paths.html</link>
				<guid isPermaLink="true">http://devetc.org/code/2015/01/11/dependent-key-paths.html</guid>
			</item>
		
			<item>
				<title>Mutable Return Values</title>
				<description>&lt;p&gt;Over the past year I’ve had the opportunity to interview a couple dozen candidates for iOS positions (heavy in Objective-C) at Fitbit.
Early on in the process we discuss some commonly used concepts, plus do some light coding.
In particular we often ask the candidate to implement a method of the form:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;manipulateSomeArray:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The manipulation is straightforward&lt;sup id=&quot;fnref:non-disclose&quot;&gt;&lt;a href=&quot;#fn:non-disclose&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; — create an &lt;code&gt;NSMutableArray&lt;/code&gt;, add some combination of the objects in then input array, then return the result.
As candidates talk through it, many have misconceptions about returning the intermediate &lt;code&gt;NSMutableArray&lt;/code&gt;, versus returning a ‘plain’ &lt;code&gt;NSArray&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Commonly, I’ll hear that you can’t or shouldn’t return a mutable array because the compiler will be confused / angry / upset.
That’s a load of crap.
More recently we use &lt;a href=&quot;https://coderpad.io/&quot;&gt;CoderPad&lt;/a&gt; with candidates, which provides the ability to actually run the compiler.
Upon seeing that returning the &lt;code&gt;NSMutableArray *&lt;/code&gt; is totally fine, I’ve heard “Hmm, it works now, but I know I’ve seen the compiler get this wrong before”.
(This may make the interviewer confused / angry / upset.)&lt;/p&gt;

&lt;p&gt;I’ll spit it out: Returning an &lt;code&gt;NSMutableArray *&lt;/code&gt; value is permitted from a method that returns &lt;code&gt;NSArray *&lt;/code&gt;, just as it would be from a method that returns &lt;code&gt;NSObject *&lt;/code&gt;.
&lt;code&gt;NSMutableArray&lt;/code&gt; is a subclass of &lt;code&gt;NSArray&lt;/code&gt;, which means a &lt;em&gt;mutable array is an  array&lt;/em&gt; (they have an &lt;a href=&quot;http://en.wikipedia.org/wiki/Is-a&quot;&gt;is-a&lt;/a&gt; relationship).
In plain C, you can return a &lt;code&gt;char *&lt;/code&gt; value from a method typed as &lt;code&gt;void *&lt;/code&gt; for similar reasons. There are &lt;strong&gt;no language issues&lt;/strong&gt; with returning a mutable array.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arrayWithEveryOtherObjectInArray:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another reason I’ve heard against returning the mutable instance is that it’s bad form, because the caller could then cast it back to an &lt;code&gt;NSMutableArray&lt;/code&gt; and mutate it.
That’s strictly true, but has nothing do to with the method being called.
The caller could similarly just &lt;code&gt;free&lt;/code&gt; the object pointer, and bad things would also happen.
There are rules that code must follow if it wants reasonable behavior! &lt;/p&gt;

&lt;p&gt;There are times where returning a mutable value is inappropriate, but this consideration is at the API design level — on syntax and semantic analysis levels it’s fine.
Surprising behavior will arise when you return a mutable object &lt;em&gt;that is later mutated&lt;/em&gt;.
Often this will manifest as a method returning a mutable instance variable, because instance variables are longer-lived than the above example’s local variable.&lt;/p&gt;

&lt;p&gt;For example, I’d expect the following assertion to hold:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;NSView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldSubviews&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSButton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newSubviews&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newSubviews&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldSubviews&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If memory serves, this assertion would actually fail a few OS releases back.
The problem is not that the &lt;code&gt;-subviews&lt;/code&gt; method returned a mutable array, the problem is that &lt;em&gt;it was mutated&lt;/em&gt; after being returned.
For the &lt;code&gt;-subviews&lt;/code&gt; getter to act in an unsurprising way, one approach is to copy the mutable array that it returns (making it immutable).
There are times where for performance it’s desirable to avoid the copy; in this case, subviews are enumerated every time something needs to draw, which should happen a lot more frequently than adding or removing subviews.&lt;/p&gt;

&lt;p&gt;To improve performance, the code could return the internal mutable array, while making a note that it has been returned externally.
Then when &lt;code&gt;-addSubview:&lt;/code&gt; goes to modify the internal &lt;code&gt;subviews&lt;/code&gt; mutable array, it first checks the flag and sees that it needs to make a new instance so it doesn’t modify what has been given out.&lt;sup id=&quot;fnref:retain-count-opt&quot;&gt;&lt;a href=&quot;#fn:retain-count-opt&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;A similar issue exists with arguments. Consider this class (styled for brevity&lt;sup id=&quot;fnref:no-kvo&quot;&gt;&lt;a href=&quot;#fn:no-kvo&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NameParts&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NameParts&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setFullName:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;componentsSeparatedByString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which can be used like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;NameParts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NameParts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;John Smith&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; @&amp;quot;John&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This has a problem with mutability:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;NameParts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NameParts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;NSMutableString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutableName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;John Smith&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableCopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; @&amp;quot;John&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutableName&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Jack White&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; @&amp;quot;Jack White&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; @&amp;quot;John&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Previously an object was mutated after being returned; in this case the object is mutated after being passed as a parameter, also resulting in unintended behavior.
The solution is to copy the value:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setFullName:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When not using a custom setter, you can synthesize the same behavior by marking the property as &lt;code&gt;copy&lt;/code&gt; instead of &lt;code&gt;strong&lt;/code&gt; (and it’s good form to do so even when you do have a custom setter).
Immutable value classes implement &lt;code&gt;-copy&lt;/code&gt; to just return self (retained), so there’s no cost worth worrying about.
This is true even for classes that don’t have mutable counterparts like &lt;code&gt;NSURL&lt;/code&gt; and &lt;code&gt;NSNumber&lt;/code&gt;.
You should do this in your own classes.
For &lt;a href=&quot;http://www.cocoabuilder.com/archive/cocoa/65056-what-an-nszone.html&quot;&gt;legacy reasons&lt;/a&gt; it’s actually best to accomplish this by overriding &lt;code&gt;-copyWithZone:&lt;/code&gt;&lt;sup id=&quot;fnref:copy-with-zone&quot;&gt;&lt;a href=&quot;#fn:copy-with-zone&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copyWithZone:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSZone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// immutable object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In fact, the behavior of Cocoa’s &lt;code&gt;-copy&lt;/code&gt; method is not obvious.
For classes with immutable variants (such as &lt;code&gt;NSString&lt;/code&gt;, &lt;code&gt;NSArray&lt;/code&gt;), &lt;code&gt;-copy&lt;/code&gt; returns an immutable instance, and &lt;code&gt;-mutableCopy&lt;/code&gt; returns a mutable instance.
For mutable classes &lt;em&gt;without&lt;/em&gt; immutable variants (&lt;code&gt;NSFetchRequest&lt;/code&gt;, &lt;code&gt;NSAffineTransform&lt;/code&gt;), &lt;code&gt;-copy&lt;/code&gt; returns a “mutable” copy because that’s the only kind of copy; &lt;code&gt;-mutableCopy&lt;/code&gt; is left unimplemented.
Perhaps we can reconcile this by saying that &lt;code&gt;-copy&lt;/code&gt; returns &lt;em&gt;an instance that won’t change when some other instance is mutated.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don’t fear the mutable.
Separating mutable and immutable objects is one of Cocoa’s great strengths, while many other libraries have taken much longer to learn of its virtues — particularly relevant in a multi-threaded environment.
Incidentally, not separating mutable and immutable is one of Core Data’s great weaknesses, but that’s a post for another time.&lt;/p&gt;

&lt;p&gt;Also, know your limits.
When you’re asked a technical question in an interview or otherwise, please either answer it correctly (great) or say you don’t know (no problem, you can look it up); don’t say you &lt;em&gt;do&lt;/em&gt; know but give a wrong answer.
That tends to indicates you &lt;em&gt;wouldn’t&lt;/em&gt; look it up, and would blindly do the wrong thing.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:non-disclose&quot;&gt;
      &lt;p&gt;Because we plan to keep asking for the same task from new candidates, I won’t be more specific. &lt;a href=&quot;#fnref:non-disclose&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:retain-count-opt&quot;&gt;
      &lt;p&gt;It might even be possible to optimize this further, by checking the retain count of the mutable array — if it’s 1, even if the array had been returned before, the code &lt;em&gt;might&lt;/em&gt; be able to infer that no one else has a reference to it, and modify it regardless of the “returned externally” flag. But beware, it wouldn’t be possible to rely on this behavior before ARC — calling code might elide retain/release — which means it’s probably not safe to rely on it under ARC-with-optimizations. &lt;a href=&quot;#fnref:retain-count-opt&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:no-kvo&quot;&gt;
      &lt;p&gt;The &lt;code&gt;firstName&lt;/code&gt; property is changed without posting KVO notifications. &lt;a href=&quot;#fnref:no-kvo&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:copy-with-zone&quot;&gt;
      &lt;p&gt;&lt;code&gt;-copy&lt;/code&gt; calls &lt;code&gt;-copyWithZone:&lt;/code&gt;. &lt;a href=&quot;#fnref:copy-with-zone&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Sat, 08 Nov 2014 18:57:58 -0800</pubDate>
				<link>http://devetc.org/code/2014/11/08/mutable-return-values.html</link>
				<guid isPermaLink="true">http://devetc.org/code/2014/11/08/mutable-return-values.html</guid>
			</item>
		
			<item>
				<title>Auto Layout and Views that Wrap</title>
				<description>&lt;p&gt;Out of the box, wrapped text in a &lt;code&gt;UILabel&lt;/code&gt; (or &lt;code&gt;NSTextField&lt;/code&gt; on the Mac) will behave like this when its container is resized:&lt;/p&gt;

&lt;!-- http://www.gfycat.com/HeavenlyOrangeAtlanticspadefish --&gt;
&lt;video width=&quot;318&quot; height=&quot;190&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;muted&quot; poster=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/label-default-resize-poster.png&quot;&gt;
	&lt;source src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/label-default-resize.webm&quot; type=&quot;video/webm&quot; /&gt;
	&lt;source src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/label-default-resize.mp4&quot; type=&quot;video/mp4&quot; /&gt;
	&lt;img width=&quot;318&quot; height=&quot;190&quot; src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/label-default-resize.gif&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;This article explains how to get the following behavior:&lt;/p&gt;

&lt;!-- http://www.gfycat.com/UnimportantNervousJackrabbit --&gt;
&lt;video id=&quot;gfyVid1&quot; class=&quot;gfyVid&quot; width=&quot;318&quot; height=&quot;236&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;muted&quot; style=&quot;display: block;&quot; poster=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/label-dynamic-preferred-max-layout-width-poster.png&quot;&gt;
	&lt;source id=&quot;webmsource&quot; src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/label-dynamic-preferred-max-layout-width.webm&quot; type=&quot;video/webm&quot; /&gt;
	&lt;source id=&quot;mp4source&quot; src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/label-dynamic-preferred-max-layout-width.mp4&quot; type=&quot;video/mp4&quot; /&gt;
	&lt;img width=&quot;318&quot; height=&quot;236&quot; src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/label-dynamic-preferred-max-layout-width.gif&quot; /&gt;
&lt;/video&gt;

&lt;h2 id=&quot;why-it-doesnt-just-work&quot;&gt;Why it doesn’t “just work”&lt;/h2&gt;

&lt;p&gt;In auto layout, views have the notion of “intrinsic content size”:
A width and height (either, both, or neither) that fits the view well.
The layout system will try to give the view at least this much space with “high” priority, configurable as the view’s “compression resistance”.&lt;/p&gt;

&lt;p&gt;The layout system treats this width and height independently.
For example, if a segmented control’s text is long enough that it can’t fit horizontally, its intrinsic height will still try to be satisfied.
This works great for views that have some defined size, such as buttons, images, sliders, and small labels.&lt;/p&gt;

&lt;p&gt;But views that wrap have more complex behavior: their width and height interact.
They can trade width for height, and vice-versa.&lt;/p&gt;

&lt;p&gt;This can’t be expressed purely with constraints.
&lt;strong&gt;Proof:&lt;/strong&gt;
Consider a simplified model, ignoring word breaking and that complicated text stuff.
We’d like a view to have constant area, i.e. &lt;em&gt;width&lt;/em&gt; × &lt;em&gt;height&lt;/em&gt; = &lt;em&gt;constant&lt;/em&gt;.
Constraints must be of the form &lt;em&gt;attribute1&lt;/em&gt; = &lt;em&gt;multiplier&lt;/em&gt; × &lt;em&gt;attribute2&lt;/em&gt; + &lt;em&gt;constant&lt;/em&gt; (so the system can provide certain performance guarantees).
There is no way to represent the first equation with the second; hence there is no way to represent wrapping purely with constraints.&lt;/p&gt;

&lt;p&gt;We can’t leave both width and height as free variables to be solved by the constraint engine.
The simplest approach — and the one that Apple uses — is to fix the width, and leave the height variable (dependent on the label’s content).&lt;/p&gt;

&lt;h2 id=&quot;preferred-max-layout-width&quot;&gt;Preferred Max Layout Width&lt;/h2&gt;

&lt;p&gt;Both &lt;code&gt;UILabel&lt;/code&gt; and &lt;code&gt;NSTextField&lt;/code&gt; have the &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt; property.
If this is non-zero, it’s used as the maximum width of the label’s intrinsic content size.
When the label has more text than can fit in that width, the label will return a larger value for its intrinsic height.
(If the label has only a little text, the label’s intrinsic width can be less than its preferred max layout width.)&lt;/p&gt;

&lt;p&gt;On iOS, &lt;code&gt;UILabel&lt;/code&gt;’s preferred max layout width is set to the width of the label as it appears in the nib (even if it becomes a different size at runtime).&lt;/p&gt;

&lt;p&gt;On OS X, &lt;code&gt;NSTextField&lt;/code&gt; can optionally have its preferred max layout width set to the first size it takes on &lt;em&gt;after&lt;/em&gt; layout.&lt;/p&gt;

&lt;p&gt;If the space available to the label can change, as in the demo at the top, or if the container can be resized (or rotated), you’ll need to change the preferred max layout width dynamically.&lt;/p&gt;

&lt;h2 id=&quot;adjusting-the-preferred-max-layout-width&quot;&gt;Adjusting the Preferred Max Layout Width&lt;/h2&gt;

&lt;p&gt;To dynamically set &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt;, you’ll need to override &lt;code&gt;-[UIView layoutSubviews]&lt;/code&gt; or &lt;code&gt;-[NSView layout]&lt;/code&gt; of the label’s superview.
To get the behavior at the top, set the preferred max layout width to the width available to the label.&lt;/p&gt;

&lt;p&gt;The example label has these constraints:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;356&quot; height=&quot;178&quot; alt=&quot;Label constraints&quot; src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/label-constraints.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The fixed left and right constraints make it take up all available horizontal space.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please don’t&lt;/em&gt; hard-code numerical constants in your code.
They’ll make your layout overly fragile.
Instead, you can use the layout system to your advantage and do two passes.&lt;/p&gt;

&lt;p&gt;The second animation at the top uses the following code in the label’s superview:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;layoutSubviews&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;availableLabelWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredMaxLayoutWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;availableLabelWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first call to &lt;code&gt;[super layoutSubviews]&lt;/code&gt; will evaluate the constraints on the label (since it’s a direct subview) and change its frame accordingly.
At this point the width is useful, but the height is not; the height was set using the label’s intrinsic content size, which in turn relied on a preferred max layout width value that is now stale.&lt;/p&gt;

&lt;p&gt;Now we know the actual width of the label, we set that as its max layout width.
Internally, this causes the label to invalidate its intrinsic content size; when it’s next queried, it will have the accurate height for its current width.
With all layout information in place, we call &lt;code&gt;[super layoutSubviews]&lt;/code&gt; again.&lt;/p&gt;

&lt;h2 id=&quot;creating-your-own-views-that-wrap&quot;&gt;Creating your own views that wrap&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/jmah/WrapDemo&quot;&gt;WrapDemo&lt;/a&gt; project contains a view that wraps like &lt;code&gt;UILabel&lt;/code&gt; / &lt;code&gt;NSTextField&lt;/code&gt;.
It has a &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt; property that the superview sets, and a shared layout method (&lt;code&gt;-[MyWrappingView enumerateItemRectsForLayoutWidth:usingBlock:]&lt;/code&gt;).
This method is called by both &lt;code&gt;-intrinsicContentSize&lt;/code&gt; to calculate the size based on the preferred max layout width, and &lt;code&gt;-layoutSubviews&lt;/code&gt; to position the colored items based on the actual view size.&lt;/p&gt;

&lt;!-- http://www.gfycat.com/TidyQuerulousAzurevase --&gt;
&lt;video width=&quot;318&quot; height=&quot;168&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;muted&quot; poster=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/custom-wrapping-view-poster.png&quot;&gt;
	&lt;source src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/custom-wrapping-view.webm&quot; type=&quot;video/webm&quot; /&gt;
	&lt;source src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/custom-wrapping-view.mp4&quot; type=&quot;video/mp4&quot; /&gt;
	&lt;img width=&quot;318&quot; height=&quot;168&quot; src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/custom-wrapping-view.gif&quot; /&gt;
&lt;/video&gt;

&lt;h2 id=&quot;shrink-wrapping&quot;&gt;Shrink-Wrapping&lt;/h2&gt;

&lt;p&gt;Finally, there are times where we’d like to combine wrapping with “shrink to fit” behavior (aka “content hugging”).
Instead of fixing the label’s leading and trailing space, we can instead add constraints to make it centered and &lt;em&gt;at least&lt;/em&gt; some distance from the edge.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;356&quot; height=&quot;110&quot; alt=&quot;Label shrink-wrap constraints&quot; src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/shrink-label-constraints.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Combining this with the above &lt;code&gt;-layoutSubviews&lt;/code&gt; implementation gives the following behavior:&lt;/p&gt;

&lt;!-- http://www.gfycat.com/ArtisticActualBuzzard --&gt;
&lt;video width=&quot;318&quot; height=&quot;146&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;muted&quot; poster=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/shrink-wrap-buggy-poster.png&quot;&gt;
	&lt;source src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/shrink-wrap-buggy.webm&quot; type=&quot;video/webm&quot; /&gt;
	&lt;source src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/shrink-wrap-buggy.mp4&quot; type=&quot;video/mp4&quot; /&gt;
	&lt;img width=&quot;318&quot; height=&quot;146&quot; src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/shrink-wrap-buggy.gif&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;The space to the edge is satisfied if it’s greater-than-or-equal-to the constant — it only ever pushes the label in, it never pulls it out.
What we want to do is find the width that the label &lt;em&gt;could&lt;/em&gt; take up, without necessarily taking it all up.&lt;/p&gt;

&lt;p&gt;The auto layout API only provides one way to calculate distances: Layout, then measure.
So to find out how wide the label can become, we tell it to become &lt;em&gt;really&lt;/em&gt; wide (with careful selection of priority), lay it out, measure it, then use the result as the preferred max layout width.
The label’s intrinsic size will do the rest.&lt;/p&gt;

&lt;!-- http://www.gfycat.com/TornQuarrelsomeEnglishsetter --&gt;
&lt;video width=&quot;318&quot; height=&quot;148&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;muted&quot; poster=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/shrink-wrap-correct-poster.png&quot;&gt;
	&lt;source src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/shrink-wrap-correct.webm&quot; type=&quot;video/webm&quot; /&gt;
	&lt;source src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/shrink-wrap-correct.mp4&quot; type=&quot;video/mp4&quot; /&gt;
	&lt;img width=&quot;318&quot; height=&quot;148&quot; src=&quot;/assets/2014-07-07-auto-layout-and-views-that-wrap/shrink-wrap-correct.gif&quot; /&gt;
&lt;/video&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;layoutSubviews&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSLayoutConstraint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labelAsWideAsPossibleConstraint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSLayoutConstraint&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;constraintWithItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;
                                      &lt;span class=&quot;nl&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSLayoutAttributeWidth&lt;/span&gt;
                                      &lt;span class=&quot;nl&quot;&gt;relatedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSLayoutRelationGreaterThanOrEqual&lt;/span&gt;
                                         &lt;span class=&quot;nl&quot;&gt;toItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;
                                      &lt;span class=&quot;nl&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                                     &lt;span class=&quot;nl&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
                                       &lt;span class=&quot;nl&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1e8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// a big number&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;labelAsWideAsPossibleConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;contentCompressionResistancePriorityForAxis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UILayoutConstraintAxisHorizontal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labelAsWideAsPossibleConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;availableLabelWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredMaxLayoutWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;availableLabelWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;removeConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labelAsWideAsPossibleConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All these examples are available in the &lt;a href=&quot;https://github.com/jmah/WrapDemo&quot;&gt;WrapDemo&lt;/a&gt; project on GitHub.&lt;/p&gt;

&lt;p&gt;Thanks to Kevin Cathey for his ongoing help and insights with Auto Layout.&lt;/p&gt;

</description>
				<pubDate>Mon, 07 Jul 2014 11:55:02 -0700</pubDate>
				<link>http://devetc.org/code/2014/07/07/auto-layout-and-views-that-wrap.html</link>
				<guid isPermaLink="true">http://devetc.org/code/2014/07/07/auto-layout-and-views-that-wrap.html</guid>
			</item>
		
			<item>
				<title>Tail Recursion, Objective-C, and ARC</title>
				<description>&lt;p&gt;Tail recursion is a way to perform recursion without using a stack frame.
Put another way, tail recursion is writing iterative loops using recursive syntax.&lt;/p&gt;

&lt;p&gt;For a contrived but simple example, consider a linked list definition, with a method to calculate the length:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListNode&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A simple, recursive implementation of &lt;code&gt;-length&lt;/code&gt; could be:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// v1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This exploits the fact that calls to &lt;code&gt;nil&lt;/code&gt; will return zero&lt;sup id=&quot;fnref:send-to-nil&quot;&gt;&lt;a href=&quot;#fn:send-to-nil&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, which happens to work in this specific case because the base case is zero.
But we’ll need to play with the base case shortly, so let’s make it explicit:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// v2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;lengthOfListWithHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lengthOfListWithHead:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// base case&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;lengthOfListWithHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code is &lt;strong&gt;not&lt;/strong&gt; tail-recursive, and running it will create a stack frame for each list node.
This is undesirable because the list may have an arbitrary number of nodes&lt;sup id=&quot;fnref:node-limit&quot;&gt;&lt;a href=&quot;#fn:node-limit&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, but the stack we’re using to count them has a relatively small fixed size, so with a sufficiently long list the stack &lt;em&gt;will&lt;/em&gt; overflow and the program will crash.&lt;/p&gt;

&lt;p&gt;Let’s convert this to an iterative implementation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// v3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;lengthOfListWithHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lengthOfListWithHead:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// base case&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now calculating the length will use a constant number of stack frames&lt;sup id=&quot;fnref:frame-count&quot;&gt;&lt;a href=&quot;#fn:frame-count&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, avoiding the problem above.
Some may argue that the elegance of the recursive approach has been lost, though.&lt;/p&gt;

&lt;p&gt;Note that in each iteration, the code changes &lt;code&gt;node&lt;/code&gt; — a parameter — as well a new local variable.
We can play with this, making a parameter for &lt;code&gt;count&lt;/code&gt; as well:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// v4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;lengthOfListWithHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* base case */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lengthOfListWithHead:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now unwrap the &lt;code&gt;while&lt;/code&gt; loop:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// v5&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lengthOfListWithHead:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pay attention to the code in &lt;code&gt;else&lt;/code&gt; clause. This technique — setting parameters and jumping to the top of a method — is also known as &lt;strong&gt;calling a method&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// v6&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lengthOfListWithHead:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;lengthOfListWithHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is tail recursion.
The initial recursive implementation (v2) is &lt;strong&gt;not&lt;/strong&gt; tail-recursive because each pass performs an addition after the recursive call returns.
The state of this incomplete addition must be stored somewhere, and that “somewhere” is the stack.&lt;/p&gt;

&lt;p&gt;Let this soak in for a moment.&lt;/p&gt;

&lt;p&gt;The compiler can see that these two forms are equivalent too.
With sufficient optimizations enabled — &lt;code&gt;-O1&lt;/code&gt; for clang — the tail-recursive version is compiled into iterative code, using just one stack frame regardless of length.
This is called &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Tail_call&quot;&gt;tail call optimization&lt;/a&gt;&lt;/strong&gt; (TCO).&lt;/p&gt;

&lt;p&gt;I happened across a discussion of &lt;a href=&quot;http://duartes.org/gustavo/blog/post/tail-calls-optimization-es6/&quot;&gt;tail call optimization in ECMAScript / JavaScript&lt;/a&gt; today, and decided to sanity check my understanding, so made a little Xcode project and wrote &lt;a href=&quot;https://gist.github.com/jmah/bf846e6fc39cbc9d23c2&quot;&gt;the code above&lt;/a&gt;.
I was surprised to see that v6 did &lt;strong&gt;not&lt;/strong&gt; get its tail-call optimized:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-05-24-tail-recursion-objc-and-arc/v6-stack.png&quot;&gt;&lt;img alt=&quot;Key path warnings in Xcode&quot; src=&quot;/assets/2014-05-24-tail-recursion-objc-and-arc/v6-stack.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is going on?
This &lt;em&gt;should&lt;/em&gt; work; there is no work to be done after the recursive call, so why isn’t being optimized?
Dump the assembly! (Source annotations added by hand.)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;nf&quot;&gt;Tail&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lengthOfListWithHead_v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;main.m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;103&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001ae0:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;pushq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001ae1:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001ae4:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;pushq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r15&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001ae6:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;pushq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r14&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001ae8:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;pushq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r12&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001aea:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;pushq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001aeb:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001aee:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r14&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;; if (!node)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001af1:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;testq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001af4:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;je&lt;/span&gt;     &lt;span class=&quot;mh&quot;&gt;0x100001b37&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;; +[ListNode lengthOfListWithHead_v6:count:] + 87 at main.m:108&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001af6:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x8b3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsi&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;; &amp;quot;next&amp;quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001afd:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x514&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r12&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;; (void *)0x00007fff99e68080: objc_msgSend&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b04:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;     node.next&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b07:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;callq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r12&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b0a:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b0d:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;callq&lt;/span&gt;  &lt;span class=&quot;mh&quot;&gt;0x100001c9a&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;; symbol stub for: objc_retainAutoreleasedReturnValue&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b12:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r15&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;     (count + 1)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b15:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;incq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b18:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x8c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsi&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;; &amp;quot;lengthOfListWithHead_v6:count:&amp;quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b1f:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b22:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b25:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rcx&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;     [self lengthOfListWithHead_v6:node.next count:(count + 1)];&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b28:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;callq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r12&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b2b:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b2e:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b31:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;callq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4e9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;; (void *)0x00007fff99e6b0d0: objc_release&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b37:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b3a:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;popq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b3b:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;popq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r12&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b3d:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;popq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r14&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b3f:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;popq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r15&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b41:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;popq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001b42:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem is revealed: there &lt;strong&gt;is&lt;/strong&gt; work to be done after the recursive call: automatic reference counting inserted a release call for the value returned from &lt;code&gt;node.next&lt;/code&gt;.
If we were writing this with manual retain/release, one wouldn’t insert any memory management calls into this at all, because &lt;code&gt;-next&lt;/code&gt; returns an autoreleased object.
However when this is compiled under ARC, calls to &lt;code&gt;objc_retainAutoreleasedReturnValue&lt;/code&gt; and &lt;code&gt;objc_release&lt;/code&gt; are inserted to allow for another optimization — having the return value skip the autorelease pool entirely.
Unfortunately in this case, it conflicts with tail call optimization.&lt;/p&gt;

&lt;p&gt;One way to avoid this is to use the instance variable directly:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// v7&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;lengthOfListWithHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lengthOfListWithHead:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;lengthOfListWithHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_next&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This generates much more compact assembly:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;nf&quot;&gt;Tail&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lengthOfListWithHead_v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;main.m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a50:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;pushq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a51:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a54:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;testq&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a57:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;je&lt;/span&gt;     &lt;span class=&quot;mh&quot;&gt;0x100001a75&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;; +[ListNode lengthOfListWithHead_v7:count:] + 37 at main.m:120&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a59:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0xaf0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;; ListNode._next&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a60:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a64:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;incq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rcx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a67:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x9b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsi&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;; &amp;quot;lengthOfListWithHead_v7:count:&amp;quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a6e:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;popq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;; The “jump” instead of “call” shows tail call optimization in effect&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a6f:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;jmpq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x5a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;; (void *)0x00007fff99e68080: objc_msgSend&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a75:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a78:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;popq&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;x100001a79:&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However the behavior is slightly different: &lt;code&gt;node&lt;/code&gt; could be an instance of a &lt;code&gt;ListNode&lt;/code&gt; subclass that has overridden &lt;code&gt;next&lt;/code&gt; to return something different. The compiler, being conservative, won’t replace the message send with an instance variable access for this reason.&lt;/p&gt;

&lt;p&gt;So depending on the use case, we might choose to:&lt;/p&gt;

&lt;ol&gt;&lt;!-- Switch to HTML so code block can be in the li, sigh --&gt;
&lt;li&gt;
Assume &lt;code&gt;next&lt;/code&gt; isn’t overridden, access the ivar directly, and get tail call optimization.
&lt;/li&gt;

&lt;li&gt;
Try to handle both situations:


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// v8&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lengthOfListWithHead:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isMemberOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;lengthOfListWithHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_next&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;lengthOfListWithHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

  
&lt;p&gt;
Unfortunately I was unable to get this to work, even trying a variety of ways to check the class there would always be unconditional release calls inserted at the end of the method that thwarted TCO.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
Compile this code without ARC, allowing TCO at the cost of autorelease optimization.

&lt;p&gt;
But the &lt;strong&gt;best&lt;/strong&gt; choice is:
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
Admit defeat, and just use explicit iteration.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In an ARC environment, tail call optimization (and thus tail recursion) is too fragile. Don’t rely on it.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:send-to-nil&quot;&gt;
      &lt;p&gt;See &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithObjects/WorkingwithObjects.html#//apple_ref/doc/uid/TP40011210-CH4-SW22&quot;&gt;Programming with Objective-C: Working with nil&lt;/a&gt; &lt;a href=&quot;#fnref:send-to-nil&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:node-limit&quot;&gt;
      &lt;p&gt;As written here, where every node is an object in memory, of course there is a limit to those too. Both 32-bit and 64-bit address spaces allow &lt;em&gt;much&lt;/em&gt; longer lists than the stack could could accommodate, though. &lt;a href=&quot;#fnref:node-limit&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:frame-count&quot;&gt;
      &lt;p&gt;Naively this will use 2 frames, one for &lt;code&gt;-[ListNode length]&lt;/code&gt; and one for &lt;code&gt;+[ListNode lengthOfListWithHead:]&lt;/code&gt;. If the tail call in &lt;code&gt;-[ListNode length]&lt;/code&gt; can be turned into a jump, there may only be one frame; but it likely can’t be. See &lt;a href=&quot;http://www.complang.tuwien.ac.at/schani/diplarb.ps&quot;&gt;Proper Tail Recursion in C&lt;/a&gt;. &lt;a href=&quot;#fnref:frame-count&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Sat, 24 May 2014 23:26:15 -0700</pubDate>
				<link>http://devetc.org/code/2014/05/24/tail-recursion-objc-and-arc.html</link>
				<guid isPermaLink="true">http://devetc.org/code/2014/05/24/tail-recursion-objc-and-arc.html</guid>
			</item>
		
			<item>
				<title>Compile-time checking plain key path strings</title>
				<description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/cocoa/Conceptual/KeyValueCoding/Articles/KeyValueCoding.html&quot;&gt;Key–value coding&lt;/a&gt; — &lt;code&gt;valueForKeyPath:&lt;/code&gt; and &lt;code&gt;setValue:forKeyPath:&lt;/code&gt; — is very useful for converting data from one format to another, such as copying from a property list-like structure (e.g. deserialized JSON) into model objects proper.
This avoids a lot of boilerplate typically found in, for example, Java-based systems&lt;sup id=&quot;fnref:java-boilerplate&quot;&gt;&lt;a href=&quot;#fn:java-boilerplate&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;On the Mac, with &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CocoaBindings/CocoaBindings.html&quot;&gt;Cocoa Bindings&lt;/a&gt; you can throw together a simple UI in a flash, setting up key paths in Interface Builder.
On iOS you have to provide some of the glue yourself, but you typically let &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html&quot;&gt;key–value observing&lt;/a&gt; do the hardest work.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;These “key–value” techniques have one main thing in common:
They use strings to reference code.
This makes it fragile. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContrivedExample&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contrivedLength&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contrivedLengthKVC&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;valueForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we rename the method &lt;code&gt;title&lt;/code&gt;, the compiler will immediately show that &lt;code&gt;contrivedLength&lt;/code&gt; won’t work without changes.
But &lt;code&gt;contrivedLengthKVC&lt;/code&gt; will have no such warning, because &lt;code&gt;@&quot;title&quot;&lt;/code&gt; remains a perfectly valid string.
We would only see an error at run-time, if and when that code was triggered.
Of course in real code, string references like this appear much further apart than in the above snippet, making stale references and even typos a real problem.&lt;/p&gt;

&lt;h2 id=&quot;the-common-solution&quot;&gt;The common solution&lt;/h2&gt;

&lt;p&gt;In short:
&lt;strong&gt;The compiler does not validate key paths, because they are strings.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One approach toward validation is avoid strings&lt;sup id=&quot;fnref:stringly-typed&quot;&gt;&lt;a href=&quot;#fn:stringly-typed&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Of course, a string must emerge at some point, but pre-processor macros allow using the same expression (&lt;code&gt;title&lt;/code&gt;) as both code and data, at compile-time.
Many have taken this route, resulting in a large variety&lt;sup id=&quot;fnref:safe-kvc-links&quot;&gt;&lt;a href=&quot;#fn:safe-kvc-links&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; with different trade-offs. A couple that are representative:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;With &lt;a href=&quot;https://github.com/jspahrsummers/libextobjc/blob/master/extobjc/EXTKeyPathCoding.h&quot;&gt;libextobjc&lt;/a&gt; you have to specify the target of the key path twice — &lt;code&gt;[self valueForKey:@keypath(self.title)]&lt;/code&gt; above — though this is often redundant, and obscures that the resulting string will be simply “title”.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/delicious-monster/DMSafeKVC&quot;&gt;DMSafeKVC&lt;/a&gt; is more concise at use — &lt;code&gt;[self valueForKey:K(title)]&lt;/code&gt; — but require annotating declarations, and only checks that &lt;em&gt;some&lt;/em&gt; class has an annotated “title” accessor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Compiler error messages are typically obscured due to macro expansion. And if you’re writing library code&lt;sup id=&quot;fnref:library-code&quot;&gt;&lt;a href=&quot;#fn:library-code&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, often the best approach is to use the lowest common denominator — static strings.&lt;/p&gt;

&lt;p&gt;A few months back, my colleagues at Fitbit discussed the ups and downs of various macro implementations and didn’t arrive at consensus.
Additionally, retrofitting our codebase would be a mostly manual task and likely generate many conflicts (our repository has around 10 active committers).&lt;/p&gt;

&lt;p&gt;I began to consider a different approach.&lt;/p&gt;

&lt;h2 id=&quot;the-code-less-traveled&quot;&gt;The code less traveled&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The compiler does not validate key paths, because they are strings.&lt;/strong&gt;
In our phrasing of the problem, a second solution becomes apparent: make the compiler validate the strings!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-05-17-safe-and-sane-key-paths/warnings.png&quot;&gt;&lt;img alt=&quot;Key path warnings in Xcode&quot; src=&quot;/assets/2014-05-17-safe-and-sane-key-paths/warnings.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the past, touching the compiler has been considered off-the-table for various reasons. With clang, this is now more practical&lt;sup id=&quot;fnref:practicality&quot;&gt;&lt;a href=&quot;#fn:practicality&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;, but the previous stigma still lingers.&lt;/p&gt;

&lt;p&gt;This code is currently proof-of-concept quality.
(I’m only a C++ novice, and barely familiar with the clang codebase.)
It currently:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checks some hard-coded method calls that are passed string literal arguments (including macros that expand to string literals).&lt;/li&gt;
  &lt;li&gt;Validates that there are corresponding getter methods, recursing down the key path.&lt;/li&gt;
  &lt;li&gt;Checks for a method named &lt;code&gt;key&lt;/code&gt; or &lt;code&gt;isKey&lt;/code&gt;, or a collection property that might be backed with &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/cocoa/conceptual/KeyValueCoding/Articles/AccessorConventions.html#//apple_ref/doc/uid/20002174-178830-BAJEDEFB&quot;&gt;KVC collection accessor methods&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Does no checking if the type is &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;NSDictionary&lt;/code&gt;, a class annotated with &lt;code&gt;objc_kvc_container&lt;/code&gt;, or a few more.&lt;/li&gt;
  &lt;li&gt;Knows that scalar numbers will be returned as &lt;code&gt;NSNumber&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Uses the diagnostic output of the secondary clang, but the binary output of Xcode’s bundled clang.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The compiler plug-in doesn’t do everything that some of the macro approaches do, but has the giant advantage of requiring zero code changes and no dependencies.
It also doesn’t exclude the use of macros, either.
Only one small project setting change is required:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Key path warnings in Xcode&quot; src=&quot;/assets/2014-05-17-safe-and-sane-key-paths/build-setting.png&quot; width=&quot;642&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’d like to try this with your own project, look at the &lt;a href=&quot;https://github.com/jmah/Clang-KeyPathValidator&quot;&gt;Clang-KeyPathValidator&lt;/a&gt; README file.
Then check out the &lt;a href=&quot;https://github.com/jmah/Clang-KeyPathValidator/issues&quot;&gt;GitHub Issues&lt;/a&gt; page and see if you can help out with something.
Or just help get the word out!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:java-boilerplate&quot;&gt;
      &lt;p&gt;This opinion is several years old, before Java reflection was commonly available or efficient. &lt;a href=&quot;#fnref:java-boilerplate&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:stringly-typed&quot;&gt;
      &lt;p&gt;The term “stringly-typed” is just great. &lt;a href=&quot;#fnref:stringly-typed&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:safe-kvc-links&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://orangejuiceliberationfront.com/safe-key-value-coding/&quot;&gt;Uli Kusterer’s approach using &lt;code&gt;@selector&lt;/code&gt;&lt;/a&gt;;&lt;br /&gt;&lt;a href=&quot;https://gist.github.com/n-b/2394297&quot;&gt;Nicolas Bouilleaud’s approach using &lt;code&gt;@selector&lt;/code&gt;&lt;/a&gt;;&lt;br /&gt;&lt;a href=&quot;https://gist.github.com/kyleve/8213806&quot;&gt;Kyle Van Essen’s approach using declared targets&lt;/a&gt;;&lt;br /&gt;&lt;a href=&quot;https://gist.github.com/darknoon/4482025&quot;&gt;Andrew Pouliot’s approach using declared targets&lt;/a&gt;;&lt;br /&gt;&lt;a href=&quot;https://github.com/iMartinKiss/Valid-KeyPath&quot;&gt;Martin Kiss’s approach using declared targets&lt;/a&gt;;&lt;br /&gt;and many more. &lt;a href=&quot;#fnref:safe-kvc-links&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:library-code&quot;&gt;
      &lt;p&gt;“Library code” refers to code shared between projects which might use different safe KVC techniques, or none at all. &lt;a href=&quot;#fnref:library-code&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:practicality&quot;&gt;
      &lt;p&gt;It’s unfortunately still not completely painless, because the particular versions shipped by Apple with Xcode are not made publicly available, and have plug-in support disabled. &lt;a href=&quot;#fnref:practicality&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Sat, 17 May 2014 17:50:34 -0700</pubDate>
				<link>http://devetc.org/code/2014/05/17/safe-and-sane-key-paths.html</link>
				<guid isPermaLink="true">http://devetc.org/code/2014/05/17/safe-and-sane-key-paths.html</guid>
			</item>
		
			<item>
				<title>Subclassing Delegates</title>
				<description>&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; Quickly looking for the right way to subclass delegates?
Jump to the &lt;a href=&quot;#summary-and-code-snippets&quot;&gt;Summary and Code Snippets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The delegation pattern is widely used throughout the Cocoa frameworks, for good reason. A delegate customizes another object’s behavior in a lightweight way, with less coupling than a subclass.
A single object can be the delegate of several others, so a set of controls presented to the user as a logical group (say, a table and some text fields) can be managed by code that’s also kept together.&lt;sup id=&quot;fnref:massive-view-controller&quot;&gt;&lt;a href=&quot;#fn:massive-view-controller&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;interface-or-implementation&quot;&gt;Interface or implementation?&lt;/h2&gt;

&lt;p&gt;List delegate protocols in the public interface of a class.&lt;/p&gt;

&lt;p&gt;Let’s consider a chain of three classes: &lt;code&gt;SpecificViewController : BaseViewController : UIViewController&lt;/code&gt;. &lt;code&gt;BaseViewController&lt;/code&gt; contains behavior common to several views of our app, and has several subclasses, including &lt;code&gt;SpecificViewController&lt;/code&gt;. This behavior includes managing a &lt;code&gt;UITextField&lt;/code&gt;, and so it conforms to the &lt;code&gt;&amp;lt;UITextFieldDelegate&amp;gt;&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;Objective-C 2.0 added the ability to declare protocols in a class’s implementation, like this:&lt;/p&gt;

&lt;h4 id=&quot;baseviewcontrollerh&quot;&gt;BaseViewController.h&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaseViewController&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;baseviewcontrollerm&quot;&gt;BaseViewController.m&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;BaseViewController.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaseViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITextFieldDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UITextField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseTextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaseViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;textFieldDidEndEditing:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITextField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;textField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseTextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;%s with %@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__func__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At first glance this seems like a good approach, and makes our encapsulation senses tingle with joy.
But it has problems.&lt;/p&gt;

&lt;p&gt;Someone else on the team is working on a subclass, &lt;code&gt;SpecificViewController&lt;/code&gt;, which needs an extra text field. So it also conforms to &lt;code&gt;&amp;lt;UITextFieldDelegate&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;h4 id=&quot;specificviewcontrollerm&quot;&gt;SpecificViewController.m&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;SpecificViewController.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpecificViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITextFieldDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UITextField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondTextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpecificViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;textFieldDidEndEditing:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITextField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;textField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondTextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Have you noticed the problem? The behavior attached to &lt;code&gt;baseTextField&lt;/code&gt; has silently been lost!
The subclass hasn’t called super, but calling super would generate a compiler warning, because the protocol was listed in the superclass’s private implementation and not public interface.&lt;/p&gt;

&lt;p&gt;The solution to this is to &lt;strong&gt;declare delegate protocol conformance in a class’s public interface&lt;/strong&gt;, and &lt;strong&gt;call super from overridden delegate methods&lt;/strong&gt;.
Declaring protocol conformance in the implementation is therefore often inappropriate.&lt;/p&gt;

&lt;p&gt;However, there’s another complication.&lt;/p&gt;

&lt;h2 id=&quot;forwarding-optional-methods&quot;&gt;Forwarding optional methods&lt;/h2&gt;

&lt;p&gt;Cocoa delegate protocols&lt;sup id=&quot;fnref:delegate-protocols&quot;&gt;&lt;a href=&quot;#fn:delegate-protocols&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; have the slightly unusual feature of optional methods.
This speeds up prototyping and development — just implement what you want to use — but interacts with subclassing in a subtle way.&lt;/p&gt;

&lt;p&gt;Many delegate methods are &lt;code&gt;@optional&lt;/code&gt;.
Before calling one, you’re responsible for checking whether it’s available; the compiler doesn’t do any checking.
(It’s similar to pointers: the compiler allows you to dereference any address, and your code is responsible for at least ensuring it’s not &lt;code&gt;NULL&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;We’ve moved the delegate protocol into the &lt;code&gt;BaseViewController.h&lt;/code&gt; header file.
Now subclasses can know that the superclass cares about the protocol, so they should forward the methods.
Let’s adjust &lt;code&gt;SpecificViewController.m&lt;/code&gt;:&lt;/p&gt;

&lt;h4 id=&quot;specificviewcontrollerm-1&quot;&gt;SpecificViewController.m&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpecificViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;textFieldDidEndEditing:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITextField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;textField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondTextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;textFieldDidEndEditing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks good, works great.
But &lt;code&gt;secondTextField&lt;/code&gt; needs some more behavior, so it adds another delegate method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpecificViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;textFieldDidEndEditing:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITextField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;textField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... as above&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;textFieldShouldClear:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITextField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;textField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondTextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someConditionIsMet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;textFieldShouldClear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We try it out, it works as expected.
But then someone presses the “clear” button in &lt;code&gt;baseTextField&lt;/code&gt;, and… &lt;em&gt;crash!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-textFieldShouldClear:&lt;/code&gt; is an optional method in &lt;code&gt;&amp;lt;UITextFieldDelegate&amp;gt;&lt;/code&gt;, so the onus is on the caller to check if it’s safe to call — in this case, it’s not.
So how can we check?&lt;/p&gt;

&lt;h3 id=&quot;look-through-the-source-code-of-all-superclasses&quot;&gt;1. Look through the source code of all superclasses.&lt;/h3&gt;

&lt;p&gt;We see that &lt;code&gt;BaseViewController&lt;/code&gt; doesn’t implement this method, so we can remove the call to super.
But then if it ever adds it, the behavior will be silently lost again!
With this approach, adding or removing a delegate method requires auditing all superclasses and all subclasses — &lt;strong&gt;not a scalable solution&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Worse: If you miss something, the code will still compile and run.
Everything will likely look fine on the surface, but have a bug lurking below.&lt;/p&gt;

&lt;h3 id=&quot;respondstoselector-of-course&quot;&gt;2. &lt;code&gt;-respondsToSelector:&lt;/code&gt;, of course&lt;/h3&gt;

&lt;p&gt;When we implement an object that takes its own delegate, the rule is easy:
Guard all calls to &lt;code&gt;@optional&lt;/code&gt; methods by &lt;code&gt;-respondsToSelector:&lt;/code&gt;, like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;canBecomeFirstResponder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;respondsToSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;myControlCanBecomeFirstResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;myControlCanBecomeFirstResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Inside &lt;code&gt;-[SpecificViewController textFieldShouldClear:]&lt;/code&gt; the selector we want to check is the same as the method we’re in, so we can just refer to it as &lt;code&gt;_cmd&lt;/code&gt;.&lt;sup id=&quot;fnref:_cmd-arg&quot;&gt;&lt;a href=&quot;#fn:_cmd-arg&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;
Now obviously &lt;code&gt;[self respondsToSelector:_cmd]&lt;/code&gt; will return true, because we’re in that very method right now.
So does &lt;code&gt;[super respondsToSelector:_cmd]&lt;/code&gt; perform the check we want?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No.&lt;/strong&gt;
The quick-and-dirty translation into English reads, “ask super if it responds to the selector in &lt;code&gt;_cmd&lt;/code&gt;,” but that’s wrong and misleading.&lt;/p&gt;

&lt;p&gt;We need to think more precisely about what the &lt;code&gt;super&lt;/code&gt; call &lt;em&gt;actually&lt;/em&gt; means.
Which is, “call the superclass’s implementation of &lt;code&gt;-respondsToSelector:&lt;/code&gt;, passing it &lt;code&gt;_cmd&lt;/code&gt;”.
Laid out like this, the behavior is clear:
&lt;code&gt;SpecificViewController&lt;/code&gt; hasn’t overridden &lt;code&gt;-respondsToSelector:&lt;/code&gt;, which means &lt;code&gt;[self respondsToSelector:]&lt;/code&gt; and &lt;code&gt;[super respondsToSelector:]&lt;/code&gt; are exactly equivalent, both most likely using &lt;code&gt;NSObject&lt;/code&gt;’s implementation.&lt;/p&gt;

&lt;h3 id=&quot;instancesrespondtoselector-nice-to-meet-you&quot;&gt;3. &lt;code&gt;+instancesRespondToSelector:&lt;/code&gt;, nice to meet you&lt;/h3&gt;

&lt;p&gt;This is an oft forgotten &lt;code&gt;NSObject&lt;/code&gt; method which does exactly as it sounds: performs &lt;code&gt;-respondsToSelector:&lt;/code&gt;, but at the class level.&lt;/p&gt;

&lt;p&gt;So we can do this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpecificViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;textFieldShouldClear:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITextField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;textField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondTextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someConditionIsMet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseViewController&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;instancesRespondToSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;textFieldShouldClear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;This is correct!&lt;/strong&gt;
Note that we also had to hard-code the default value in case the superclass doesn’t respond.&lt;sup id=&quot;fnref:delegate-default-value&quot;&gt;&lt;a href=&quot;#fn:delegate-default-value&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;It’s ugly to hard-code the superclass in there like that, so how about &lt;code&gt;[[[self class] superclass] instancesRespondToSelector:_cmd]&lt;/code&gt;?
This &lt;em&gt;feels like&lt;/em&gt; it should be the same, but it’s booby-trapped!
When someone else comes along and declares another subclass, &lt;code&gt;EvenMoreSpecificViewController : SpecificViewController&lt;/code&gt;, then &lt;code&gt;[self class]&lt;/code&gt; is &lt;code&gt;EvenMoreSpecificViewController&lt;/code&gt; and &lt;code&gt;[[self class] superclass]&lt;/code&gt; is &lt;code&gt;SpecificViewController&lt;/code&gt;.
That check would succeed, there’d be a call to super (&lt;code&gt;BaseViewController&lt;/code&gt;), then a crash.
So nope.&lt;/p&gt;

&lt;p&gt;It’s slightly cleaner is to use the defining class: &lt;code&gt;[[SpecificViewController superclass] instancesRespondToSelector:_cmd]&lt;/code&gt;.
This adds safety in case a class ever gets split into two, changing the superclass.
But it’s still an absolute reference, so the code isn’t a nice cut-and-paste snippet.&lt;/p&gt;

&lt;p&gt;It’d be nice to have a way to reference the defining class — like the &lt;code&gt;__FILE__&lt;/code&gt; macro but for the current &lt;code&gt;@implementation&lt;/code&gt;.
Although there’s nothing built-in, it’s possible to add with a macro (though less efficiently than one provided by the compiler).
I’ve done that in the &lt;a href=&quot;https://github.com/jmah/MyLilKeyPathHelpers&quot;&gt;MyLilKeyPathHelpers&lt;/a&gt; project, called &lt;code&gt;_definingClass&lt;/code&gt;.
Using this, we can create a copy-and-paste snippet:
&lt;code&gt;[[_definingClass superclass] instancesRespondToSelector:_cmd]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt;, you now know how to subclass a delegate properly!&lt;/p&gt;

&lt;h2 id=&quot;curious-uitableviewcontroller-behavior&quot;&gt;Curious UITableViewController behavior&lt;/h2&gt;

&lt;p&gt;I was initially planning on using &lt;code&gt;UITableViewController&lt;/code&gt; for this posts’s example because it’s commonly subclassed, and conforms to both &lt;code&gt;&amp;lt;UITableViewDataSource&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;UITableViewDelegate&amp;gt;&lt;/code&gt;.
I fired up the inquisitive Cocoa developer’s best friend, &lt;a href=&quot;http://www.hopperapp.com/&quot;&gt;Hopper Disassembler&lt;/a&gt;, to see which of the optional methods it implemented.
To my surprise, I found it’s more complicated than that.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UITableViewController&lt;/code&gt; plays games with &lt;code&gt;respondsToSelector:&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;kt&quot;&gt;SEL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;heightForRowAtIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITableViewController&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;instancesRespondToSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns YES&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITableViewController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;respondsToSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns NO!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since this is exceptional behavior, I had to choose a different example.&lt;/p&gt;

&lt;p&gt;The reason for this is to support the “static data source” mode which can be set up in storyboards&lt;sup id=&quot;fnref:static-storyboards&quot;&gt;&lt;a href=&quot;#fn:static-storyboards&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; with Interface Builder.
&lt;code&gt;UITableViewController&lt;/code&gt; overrides &lt;code&gt;-respondsToSelector:&lt;/code&gt; to check if its &lt;code&gt;_staticDataSource&lt;/code&gt; is nil, and then returns &lt;code&gt;NO&lt;/code&gt; for a bunch of these methods — but only if they haven’t been overridden by a subclass.
As of the iOS 7.0 SDK these methods are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;tableView:titleForHeaderInSection:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tableView:titleForFooterInSection:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tableView:heightForHeaderInSection:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tableView:heightForFooterInSection:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tableView:viewForHeaderInSection:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tableView:viewForFooterInSection:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tableView:indentationLevelForRowAtIndexPath:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s actually no harm in calling these without a static data source, so the above solutoion still works for &lt;code&gt;UITableViewController&lt;/code&gt; subclasses.&lt;/p&gt;

&lt;p&gt;But what if you &lt;em&gt;really really&lt;/em&gt; want to know what &lt;code&gt;UITableViewController&lt;/code&gt; &lt;strong&gt;would&lt;/strong&gt; have returned?
If this were &lt;a href=&quot;https://mikeash.com/pyblog/&quot;&gt;Mike Ash’s blog&lt;/a&gt;, there’d now be an in-depth examination on using &lt;code&gt;object_setClass&lt;/code&gt;.
But it’s not, so I’ll just leave you with this snippet:&lt;sup id=&quot;fnref:objc-runtime-header&quot;&gt;&lt;a href=&quot;#fn:objc-runtime-header&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tableView:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;titleForHeaderInSection:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object_getClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;object_setClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITableViewController&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superWouldRespond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;respondsToSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;object_setClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I love the power of Objective-C.
Just to be clear, &lt;strong&gt;don’t do this!&lt;/strong&gt; Here be dragons.&lt;/p&gt;

&lt;h2 id=&quot;summary-and-code-snippets&quot;&gt;Summary and Code Snippets&lt;/h2&gt;

&lt;p&gt;Specify delegate protocols in the public interface of a class.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyViewController&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UICollectionViewDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you implement a method from a protocol conformed to by a superclass, call super.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyViewControllerSubclass&lt;/span&gt; : &lt;span class=&quot;nc&quot;&gt;MyViewController&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// adds a section to the collection view&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyViewControllerSubclass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;numberOfSectionsInCollectionView:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UICollectionView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Optional method. Super may not implement, must check.&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseSections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyViewControllerSubclass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;instancesRespondToSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;baseSections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;numberOfSectionsInCollectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseSections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collectionView:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UICollectionView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfItemsInSection:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Required method, just call super.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfSections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;numberOfItemsInSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the &lt;code&gt;_definingClass&lt;/code&gt; macro, checking super doesn’t require specifying the class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyViewControllerSubclass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;numberOfSectionsInCollectionView:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UICollectionView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Optional method. Super may not implement, must check.&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseSections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_definingClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;instancesRespondToSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;baseSections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;numberOfSectionsInCollectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseSections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:massive-view-controller&quot;&gt;
      &lt;p&gt;Of course, over time a controller can get overgrown with many independent delegate responsibilities. For practical advice on managing this in iOS, see the &lt;a href=&quot;http://www.objc.io/issue-1/&quot;&gt;objc.io issue on Lighter View Controllers&lt;/a&gt;. &lt;a href=&quot;#fnref:massive-view-controller&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:delegate-protocols&quot;&gt;
      &lt;p&gt;Delegates have almost all switched over to fully-fledged Objective-C &lt;code&gt;@protocol&lt;/code&gt;s. In the olden days they were declared as un-implemented categories on &lt;code&gt;NSObject&lt;/code&gt;, but still called “informal protocols”. &lt;a href=&quot;#fnref:delegate-protocols&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:_cmd-arg&quot;&gt;
      &lt;p&gt;&lt;code&gt;_cmd&lt;/code&gt; is like &lt;code&gt;self&lt;/code&gt;, but references the selector instead of the receiver. See &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/cocoa/conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html#//apple_ref/doc/uid/TP40008048-CH104-TPXREF134&quot;&gt;Objective-C Runtime Programming Guide: Using Hidden Arguments&lt;/a&gt;. &lt;a href=&quot;#fnref:_cmd-arg&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:delegate-default-value&quot;&gt;
      &lt;p&gt;The default for delegate methods that have a return value is usually in the documentation. However some methods, like &lt;code&gt;-[&amp;lt;UITextFieldDelegate&amp;gt; textFieldShouldReturn:]&lt;/code&gt;, have a complicated set of behavior that’s difficult and fragile to replicate if super doesn’t respond. I consider this bad API design. &lt;a href=&quot;#fnref:delegate-default-value&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:static-storyboards&quot;&gt;
      &lt;p&gt;I don’t know why this requires a storyboard instead of a xib. You can drag out a table view controller and a table view, add &lt;code&gt;dataMode=&quot;static&quot;&lt;/code&gt; in the XML, and Xcode will display and edit it fine. But when it’s compiled, you’ll get &lt;em&gt;error: Table views with embedded sections and cells are only supported in storyboard documents&lt;/em&gt;. Anyway, this also requires having the nib load the view controller, instead of the (usual) other way around. &lt;a href=&quot;#fnref:static-storyboards&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:objc-runtime-header&quot;&gt;
      &lt;p&gt;You will need to &lt;code&gt;#import&lt;/code&gt; a particular header for this hackery to compile. If you don’t know which one, using this technique will cause you too much trouble. &lt;a href=&quot;#fnref:objc-runtime-header&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Sun, 02 Mar 2014 22:55:22 -0800</pubDate>
				<link>http://devetc.org/code/2014/03/02/subclassing-delegates.html</link>
				<guid isPermaLink="true">http://devetc.org/code/2014/03/02/subclassing-delegates.html</guid>
			</item>
		
			<item>
				<title>Strong Feelings on Weak Outlets</title>
				<description>&lt;p&gt;There are mixed opinions on whether &lt;code&gt;IBOutlet&lt;/code&gt; properties should be strong or weak.
Apple themselves changed their recommendation with iOS 5.
However their advice right now is bad — or at least poorly reasoned.
The rest of the Cocoa guidelines and my own experience both lead me to the opposite conclusion: &lt;strong&gt;declare outlets as strong&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To clarify, I’m talking about outlets from controllers to views — outlets on “File’s Owner”, often a &lt;code&gt;UIViewController&lt;/code&gt;, &lt;code&gt;NSViewController&lt;/code&gt;, or &lt;code&gt;NSWindowController&lt;/code&gt; instance.
(And yes, “owner” does imply “strong”.)
Outlets from views to controllers or other views — for example a table view subclass adding an &lt;code&gt;awesomeSource&lt;/code&gt; — should be weak.&lt;/p&gt;

&lt;p&gt;Tedious analysis follows.&lt;/p&gt;

&lt;h2 id=&quot;apples-reasons&quot;&gt;Apple’s reasons&lt;/h2&gt;

&lt;p&gt;Apple documents their recommendations in the &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/cocoa/conceptual/loadingresources/CocoaNibs/CocoaNibs.html&quot;&gt;Resource Programming Guide: Nib Files&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Outlets should generally be &lt;code&gt;weak&lt;/code&gt;, except for those from File’s Owner to top-level objects in a nib file (or, in iOS, a storyboard scene) which should be &lt;code&gt;strong&lt;/code&gt;.
Outlets that you create should therefore typically be &lt;code&gt;weak&lt;/code&gt;, because:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Outlets that you create to subviews of a view controller’s view or a window controller’s window, for example, are arbitrary references between objects that do not imply ownership.&lt;/li&gt;
    &lt;li&gt;The strong outlets are frequently specified by framework classes (for example, &lt;code&gt;UIViewController&lt;/code&gt;’s view outlet, or &lt;code&gt;NSWindowController&lt;/code&gt;’s window outlet).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;pre&gt;&lt;code&gt;@property (weak) IBOutlet MyView *viewContainerSubview;
@property (strong) IBOutlet MyOtherClass *topLevelObject;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;But there are caveats to using weak:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Outlets should be changed to &lt;code&gt;strong&lt;/code&gt; when the outlet should be considered to own the referenced object:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;As indicated previously, this is often the case with File’s Owner—top level objects in a nib file are frequently considered to be owned by the File’s Owner.&lt;/li&gt;
    &lt;li&gt;You may in some situations need an object from a nib file to exist outside of its original container. For example, you might have an outlet for a view that can be temporarily removed from its initial view hierarchy and must therefore be maintained independently.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;To summarize, the documentation says, “use weak when you can, but it doesn’t always work”.
If you do use weak references in the above cases, it will sometimes work (both &lt;code&gt;UIViewController&lt;/code&gt; and &lt;code&gt;NSViewController&lt;/code&gt; actually &lt;em&gt;do&lt;/em&gt; retain the top-level objects of a nib, but it’s undocumented), and sometimes fail (removing a view from its superview, if that was the last strong reference).
Oh, and remember to change them from &lt;code&gt;weak&lt;/code&gt; to &lt;code&gt;strong&lt;/code&gt; if the layout of the nib changes, or if you start doing something different with the connected objects.
And remember to change them from &lt;code&gt;strong&lt;/code&gt; back to &lt;code&gt;weak&lt;/code&gt; because… well, &lt;strong&gt;why exactly&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Each of the above reasons sounds like, “some objects already have a retaining reference, so they &lt;strong&gt;shouldn’t have&lt;/strong&gt; another”, which is an argument against reference counting in favor of &lt;code&gt;malloc&lt;/code&gt;/&lt;code&gt;free&lt;/code&gt; semantics.&lt;/p&gt;

&lt;p&gt;Consider a simple case:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ChooseOne : NSObject
@property (nonatomic, strong) NSArray *options; // @[@&quot;one&quot;, @&quot;two&quot;, @&quot;three&quot;]
@property (nonatomic, ?) NSString *selectedOption;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;options&lt;/code&gt; property indirectly holds a strong reference to all the options, so by the nib doc’s first reason &lt;code&gt;selectedOption&lt;/code&gt; should be declared &lt;code&gt;weak&lt;/code&gt;.
That could work, but it’s overly fragile:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If &lt;code&gt;selectedOption&lt;/code&gt; is set before &lt;code&gt;options&lt;/code&gt;, the value may or may not be nil.
Even worse, the outcome could depend on the compiler’s optimization setting:
Everything could look fine in Debug, but fail in Release!&lt;/li&gt;
  &lt;li&gt;There are values that compare equal but aren’t identical, such that &lt;code&gt;[choice.options containsObject:opt]&lt;/code&gt; is true, but when stored in &lt;code&gt;selectedOption&lt;/code&gt; would silently be lost.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The sane storage specifier for &lt;code&gt;selectedOption&lt;/code&gt; is at least &lt;code&gt;strong&lt;/code&gt; (&lt;code&gt;copy&lt;/code&gt; is even more appropriate).&lt;/p&gt;

&lt;p&gt;The docs also convey the feeling that &lt;code&gt;weak&lt;/code&gt; is an optimization. With my memory-management goggles on, this is how I read the above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Outlets that are connected to subviews are already retained by the top-level &lt;code&gt;view&lt;/code&gt; (or &lt;code&gt;window&lt;/code&gt;) outlet, so they &lt;strong&gt;shouldn’t bother&lt;/strong&gt; with that retain/release stuff.&lt;/li&gt;
  &lt;li&gt;The outlets that do need to do these “heavy-weight” retain/release calls are typically provided by the system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is misleading, because accessing a &lt;code&gt;weak&lt;/code&gt; property is many times slower than a &lt;code&gt;strong&lt;/code&gt; one!
All that’s needed to access a &lt;code&gt;strong, nonatomic&lt;/code&gt; property is just to read and return the pointer value.&lt;sup id=&quot;fnref:objc-accessors&quot;&gt;&lt;a href=&quot;#fn:objc-accessors&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
Accessing a &lt;code&gt;weak, nonatomic&lt;/code&gt; property requires first testing that the object hasn’t been marked as deallocated, then retaining and autoreleasing the value (otherwise the returned pointer may turn invalid at any time); and each part of this access requires locking.&lt;sup id=&quot;fnref:objc-loadWeak&quot;&gt;&lt;a href=&quot;#fn:objc-loadWeak&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The only reason in support of &lt;code&gt;weak&lt;/code&gt; outlets is that they don’t require explicit clean-up when releasing the top-level view.
But unloading the top-level view turned out to be difficult to get correct, difficult to test, and &lt;strong&gt;very difficult&lt;/strong&gt; to keep correct as the code changes.
So Apple very practically decided to stop doing it as of iOS 6.&lt;sup id=&quot;fnref:wwdc-viewDidUnload&quot;&gt;&lt;a href=&quot;#fn:wwdc-viewDidUnload&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;curiouser&quot;&gt;Curiouser&lt;/h2&gt;

&lt;p&gt;At some point in 2011&lt;sup id=&quot;fnref:adc-nibs-revision-history&quot;&gt;&lt;a href=&quot;#fn:adc-nibs-revision-history&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, the guidelines for iOS was changed from &lt;code&gt;strong&lt;/code&gt; to &lt;code&gt;weak&lt;/code&gt;.
I’d really like to know the history of this, because the reasons stated now were just as valid then.
Perhaps there’s some unstated reason?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Prior to ARC, the rules for managing nib objects are different from those described above. How you manage the objects depends on the platform and on the memory model in use. Whichever platform you develop for, you should define outlets using the Objective-C declared properties feature.&lt;/p&gt;

  &lt;p&gt;[…]&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;For iOS, you should use:&lt;/li&gt;
  &lt;/ul&gt;
  &lt;pre&gt;&lt;code&gt;@property (nonatomic, retain) IBOutlet UserInterfaceElementClass *anOutlet;&lt;/code&gt;&lt;/pre&gt;

  &lt;ul&gt;
    &lt;li&gt;For OS X, you should use:&lt;/li&gt;
  &lt;/ul&gt;
  &lt;pre&gt;&lt;code&gt;@property (assign) IBOutlet UserInterfaceElementClass *anOutlet;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;share-your-thoughts&quot;&gt;Share Your Thoughts&lt;/h2&gt;

&lt;p&gt;Do you have strong feelings on this?
Am I missing something mind-numbingly obvious?
Shoot a Twitter-gram to the germinal &lt;a href=&quot;https://twitter.com/dev_etc&quot;&gt;@dev_etc&lt;/a&gt;, or an App.net-o-gram to &lt;a href=&quot;https://alpha.app.net/jmah&quot;&gt;@jmah&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:objc-accessors&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;http://www.opensource.apple.com/source/objc4/objc4-551.1/runtime/Accessors.subproj/objc-accessors.mm&quot;&gt;objc-accessors.mm source file&lt;/a&gt; &lt;a href=&quot;#fnref:objc-accessors&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:objc-loadWeak&quot;&gt;
      &lt;p&gt;See &lt;code&gt;objc_loadWeak&lt;/code&gt; in clang’s &lt;a href=&quot;http://clang.llvm.org/docs/AutomaticReferenceCounting.html#arc-runtime-objc-loadweak&quot;&gt;Automatic Reference Counting documentation&lt;/a&gt;. &lt;a href=&quot;#fnref:objc-loadWeak&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:wwdc-viewDidUnload&quot;&gt;
      &lt;p&gt;See &lt;a href=&quot;https://developer.apple.com/videos/wwdc/2012/&quot;&gt;WWDC 2012&lt;/a&gt; Session 200: “What’s New in Cocoa Touch”, 00:18:00 in. &lt;a href=&quot;#fnref:wwdc-viewDidUnload&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:adc-nibs-revision-history&quot;&gt;
      &lt;p&gt;Actually 2011-10-12, thanks to the &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/cocoa/conceptual/loadingresources/RevisionHistory.html#//apple_ref/doc/uid/20001604-CJBGIAGF&quot;&gt;revision history&lt;/a&gt; &lt;a href=&quot;#fnref:adc-nibs-revision-history&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Sun, 16 Feb 2014 11:02:56 -0800</pubDate>
				<link>http://devetc.org/code/2014/02/16/strong-feelings-on-weak-outlets.html</link>
				<guid isPermaLink="true">http://devetc.org/code/2014/02/16/strong-feelings-on-weak-outlets.html</guid>
			</item>
		
			<item>
				<title>Timers, Clocks, and Cocoa</title>
				<description>&lt;p&gt;Time is a complicated thing (cf. relativity), and it’s a vital part of programs interacting with the world.
In casual conversation we usually speak as if there is a value called “the time”, which we can read from “the clock”.&lt;/p&gt;

&lt;p&gt;But programming requires specifying things precisely.
The measurement called “the clock” can be changed by the user, and by automatic time setting.
If we were to use the value of this clock to determine whether an event occurred before or after another, things would occasionally seem crazy!&lt;/p&gt;

&lt;p&gt;When you change the clock on your computer or phone, things keep running pretty well.
In well-written software, network requests don’t suddenly time out; transfer rates don’t become “−22 MB / second”; and the desktop doesn’t implode in a “general causality fault”.
With so many things dependent on time, how does changing the clock not wreak havoc?&lt;/p&gt;

&lt;p&gt;There are, in fact, multiple clocks.
At first glance they can all appear to run at the same rate, so it might not appear to matter which one you choose.
But they have quite different behaviors, and inevitably diverge over time.
Choosing the wrong clock can make your software behave unexpectedly, and possibly crash.&lt;/p&gt;

&lt;p&gt;As an application developer, these are the most useful clocks in practice&lt;sup id=&quot;fnref:cpu-time&quot;&gt;&lt;a href=&quot;#fn:cpu-time&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;real-time clock&lt;/strong&gt;, usually accessed in Cocoa via &lt;code&gt;NSDate&lt;/code&gt;.&lt;sup id=&quot;fnref:unix-realtime&quot;&gt;&lt;a href=&quot;#fn:unix-realtime&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
This is the system’s best guess of &lt;a href=&quot;http://en.wikipedia.org/wiki/UTC&quot;&gt;coordinated universal time&lt;/a&gt; (UTC).
The user can change this clock arbitrarily, and the NTP (Network Time Protocol) service also makes changes as it tries to keep it in sync with an external reference.
Almost all network-connected devices sync with an external source by default, via an Internet time server, &lt;a href=&quot;http://en.wikipedia.org/wiki/Radio_clock#GPS_clocks&quot;&gt;GPS&lt;/a&gt;, or the phone network.
While the value of this clock typically increases by 1 second per real second, at times it runs faster or slower, and makes discontinuous jumps both forwards and backwards.&lt;sup id=&quot;fnref:ntp-clock-changing&quot;&gt;&lt;a href=&quot;#fn:ntp-clock-changing&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Monotonic time&lt;/strong&gt; is basically a counter that gets incremented when a physical timer signals the CPU via a timer interrupt.
On Mac OS X and iOS, the counter value is returned from &lt;code&gt;mach_absolute_time()&lt;/code&gt;, and the number of counts per second is returned by &lt;code&gt;mach_timebase_info()&lt;/code&gt;.&lt;sup id=&quot;fnref:mach-absolute-time-units&quot;&gt;&lt;a href=&quot;#fn:mach-absolute-time-units&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
Several functions include the conversion to seconds: &lt;code&gt;-[NSProcessInfo systemUptime]&lt;/code&gt;, &lt;code&gt;CACurrentMediaTime()&lt;/code&gt;, and others.
The particular value of this counter isn’t really useful because it’s reset on boot, but the difference between two readings tells you how much time has elapsed, regardless of any changes to the real-time clock.
This is useful for measuring throughput, or processing speed, of some operation — numbers like “frames per second”.
However since the CPU increments this counter, &lt;em&gt;the monotonic clock stops when the CPU is powered down&lt;/em&gt; — which includes when the system is “sleeping”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Boot time&lt;/strong&gt;, which is like monotonic time but does not pause when the system goes to sleep.
This value is reported by the &lt;code&gt;uptime&lt;/code&gt; tool.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;NSTimer&lt;/code&gt; uses monotonic time. This means it pauses when the system goes to sleep, which happens unpredictably and opportunistically on iOS!
This makes &lt;code&gt;NSTimer&lt;/code&gt; &lt;strong&gt;incorrect for timeouts and timing&lt;/strong&gt; involving anything external — from waiting for a server response to timing the cooking of an egg.
&lt;code&gt;NSTimer&lt;/code&gt; is only appropriate if the process being timed is confined to the system — such as your app waiting for a result from the kernel, or another app.&lt;/p&gt;

&lt;h2 id=&quot;pick-your-clock&quot;&gt;Pick your clock&lt;/h2&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;//www.youtube-nocookie.com/embed/ZRM8mq-ZSO0?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This chart lays out how the clock values change over time in the above video:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-01-21-timers-clocks-and-cocoa/MyLilTimer-clock-values-over-time.svg&quot; alt=&quot;Clock values over time&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For measuring durations without interference from real-time clock changes or system sleep, &lt;strong&gt;you need to use boot time&lt;/strong&gt; — which &lt;code&gt;NSTimer&lt;/code&gt; does not provide.
To make matters worse, iOS devices don’t go to sleep when plugged in, including when running an app from Xcode.
So using &lt;code&gt;NSTimer&lt;/code&gt; can appear to act like it’s using boot time, until you run with the device unplugged!&lt;/p&gt;

&lt;p&gt;The Cocoa frameworks do not offer any way to be notified of these time discontinuities in general. UIKit offers &lt;code&gt;UIApplicationSignificantTimeChangeNotification&lt;/code&gt; which fires when the real-time clock changes (and a couple of other cases useful for calendar-type apps), but not when waking from sleep. On the Mac there is &lt;code&gt;NSWorkspaceDidWakeNotification&lt;/code&gt;,&lt;sup id=&quot;fnref:sleep-wake&quot;&gt;&lt;a href=&quot;#fn:sleep-wake&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; but there is no (public) counterpart for iOS.&lt;/p&gt;

&lt;p&gt;GCD’s &lt;code&gt;dispatch_after&lt;/code&gt; function (and the timer &lt;code&gt;dispatch_source&lt;/code&gt;) allow creating timers with either the monotonic or real-time clock, depending on how the &lt;code&gt;dispatch_time&lt;/code&gt; object is created.
There isn’t an option to use the boot time clock.
Because most other timers only use the monotonic clock, I got curious as to how real-time clock timers were implemented.
The &lt;a href=&quot;http://opensource.apple.com/source/libdispatch/libdispatch-339.1.9/src/source.c&quot;&gt;libdispatch source&lt;/a&gt; observes the &lt;code&gt;HOST_NOTIFY_CALENDAR_CHANGE&lt;/code&gt; Mach notification to reschedule real-time clock timers.
The only form of documentation appears to be comments in the &lt;a href=&quot;http://www.opensource.apple.com/source/xnu/xnu-2422.1.72/osfmk/kern/clock.c&quot;&gt;kernel source&lt;/a&gt;, which indeed indicates it’s sent when the real-time clock changes, as well as when the system is woken:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 *	clock_initialize_calendar:
 *
 *	Set the calendar and related clocks
 *	from the platform clock at boot or
 *	wake event.
 *
 *	Also sends host notifications.
 */

/*
 *	clock_set_calendar_microtime:
 *
 *	Sets the current calendar value by
 *	recalculating the epoch and offset
 *	from the system clock.
 *
 *	Also adjusts the boottime to keep the
 *	value consistent, writes the new
 *	calendar value to the platform clock,
 *	and sends calendar change notifications.
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However it does &lt;em&gt;not&lt;/em&gt; mention how far this behavior has existed, so older OS versions potentially don’t do the same thing (it works back to at least iOS 6). It is used in several place though, including by the &lt;a href=&quot;http://opensource.apple.com/source/PowerManagement/PowerManagement-420.1.20/pmconfigd/pmconfigd.c&quot;&gt;power management daemon&lt;/a&gt; to re-sync the battery’s time remaining.&lt;/p&gt;

&lt;h2 id=&quot;myliltimer&quot;&gt;MyLilTimer&lt;/h2&gt;

&lt;p&gt;Since this is all unreasonably difficult with Cocoa, I wrote something:
&lt;a href=&quot;https://github.com/jmah/MyLilTimer&quot;&gt;MyLilTimer&lt;/a&gt; has an interface similar to &lt;code&gt;NSTimer&lt;/code&gt;, with the added option of using one of the three clocks above
Additionally, because iOS suspends apps in the background (and now OS X too with “App Nap”), an app can often be notified of the firing of a timer significantly after it was scheduled to fire. The &lt;code&gt;-timeSinceFireDate&lt;/code&gt; method returns that duration, using the clock selected by the timer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jmah/MyLilTimer&quot;&gt;MyLilTimer&lt;/a&gt; observes the &lt;code&gt;HOST_NOTIFY_CALENDAR_CHANGE&lt;/code&gt; kernel notification, checks the value of the corresponding clock, and resets an internal &lt;code&gt;NSTimer&lt;/code&gt; to the new expiry date. Give it a go!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt; to &lt;a href=&quot;https://twitter.com/wilshipley&quot;&gt;Wil Shipley&lt;/a&gt; for feedback on the early version of this.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:cpu-time&quot;&gt;
      &lt;p&gt;There is also &lt;a href=&quot;http://en.wikipedia.org/wiki/CPU_time&quot;&gt;&lt;strong&gt;CPU time&lt;/strong&gt;&lt;/a&gt;, which is the time that a single CPU has been dedicated to a process. This is the “user” number when using &lt;code&gt;time&lt;/code&gt; on the command-line. When a process runs for 1 second utilizing 75% of 4 cores, the CPU time is &lt;code&gt;1 * 0.75 * 4 = 3 core • seconds&lt;/code&gt;. Since this has different units (not seconds), it is not a clock. &lt;a href=&quot;#fnref:cpu-time&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:unix-realtime&quot;&gt;
      &lt;p&gt;and Unix via &lt;code&gt;gettimeofday&lt;/code&gt;, or &lt;code&gt;clock_gettime&lt;/code&gt; with &lt;code&gt;CLOCK_REALTIME&lt;/code&gt;. &lt;a href=&quot;#fnref:unix-realtime&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:ntp-clock-changing&quot;&gt;
      &lt;p&gt;When NTP synchronizes, it changes the system clock, &lt;a href=&quot;http://www.ntp.org/ntpfaq/NTP-s-algo.htm#Q-CLOCK-DISCIPLINE&quot;&gt;either instantly or slowly depending on the difference&lt;/a&gt;. &lt;a href=&quot;#fnref:ntp-clock-changing&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:mach-absolute-time-units&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/qa/qa1398/_index.html&quot;&gt;Technical Q&amp;amp;A QA1398: Mach Absolute Time Units&lt;/a&gt; &lt;a href=&quot;#fnref:mach-absolute-time-units&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:sleep-wake&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/qa/qa1340/_index.html&quot;&gt;Technical Q&amp;amp;A QA1340: Registering and unregistering for sleep and wake notifications&lt;/a&gt; &lt;a href=&quot;#fnref:sleep-wake&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Tue, 21 Jan 2014 13:03:49 -0800</pubDate>
				<link>http://devetc.org/code/2014/01/21/timers-clocks-and-cocoa.html</link>
				<guid isPermaLink="true">http://devetc.org/code/2014/01/21/timers-clocks-and-cocoa.html</guid>
			</item>
		
	</channel>
</rss>
